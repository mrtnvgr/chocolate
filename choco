#!/bin/python
import signal
signal.signal(signal.SIGINT, signal.SIG_DFL)
import os, sys, json, subprocess, threading, time, requests, datetime
from PyQt5 import QtCore, QtWidgets, QtGui

version = "0.0.5"

def term_run(cmd): return subprocess.run(cmd.split(" "), stdout=subprocess.PIPE, cwd=sys.path[0]).stdout.decode('utf-8').split("\n")

def weather(city_id, api_key, lang, type):
    try:
        response = requests.get(f"https://api.openweathermap.org/data/2.5/weather?id={city_id}&lang={lang}&appid={api_key}&units={type}")
    except:
        return False
    if response.status_code==200:
        data = response.json()
        return f"{data['main']['temp']}°C ({data['weather'][0]['description']})"
    else:
        return False

def rates(rt1, rt2):
    try:
        response = requests.get(f'https://freecurrencyrates.com/api/action.php?do=cvals&iso={rt1}&f={rt2}&v=1&s=cbr')
    except:
        return False
    if response.status_code==200:
        return str(round(response.json()[rt1.upper()],2))
    else:
        return False

def date(formt): return datetime.datetime.now().strftime(formt)

def updateModule(align, index):
    if align=="right":
        cmd = config["right_modules"][index][0]
        label = config["right_modules"][index][1]
        intrv = config["right_modules"][index][2]
        term = config["right_modules"][index][3]
    elif align=="center":
        cmd = config["center_modules"][index][0]
        label = config["center_modules"][index][1]
        intrv = config["center_modules"][index][2]
        term = config["center_modules"][index][3]
    while True:
        if term.lower()=="true":
            output = term_run(cmd)[0]
        else:
            output = eval(cmd)
            if output==False:
                time.sleep(intrv)
                continue
        if align=="right":
            RIGHTOUTPUTS[index] = label.format(output)
            rightlabel.setText(config["spacing"].join(RIGHTOUTPUTS))
        elif align=="center":
            CENTEROUTPUTS[index] = output
            centerlabel.setText(label.format(config["spacing"].join(CENTEROUTPUTS)))
        time.sleep(intrv)

def updateDesktops():
    if config["wm"]=="bspwm":
        curDesktop = term_run("bspc query -D -d focused")[0]
        curDesktopName = term_run("bspc query -D -d focused --names")[0]
        leftlabel.setText("    " + curDesktopName)
        fullscreenDesktop = []
        with subprocess.Popen(["bspc","subscribe","desktop_focus","node_state"], stdout=subprocess.PIPE, bufsize=1, universal_newlines=True) as p:
            for line in p.stdout:
                splitted = line.replace("\n", "").split(" ")
                #print(splitted)
                if 'desktop_focus' in line:
                    curDesktop = splitted[2]
                    curDesktopName = term_run("bspc query -T -d")[0].split('{"name":"')[1].split('","')[0]
                    leftlabel.setText("    " + curDesktopName)
                    if splitted[2] not in fullscreenDesktop:
                        window.show()
                    else:
                        window.hide()
                elif 'node_state' in line:
                    if splitted[2]==curDesktop and splitted[4]=="fullscreen":
                            if splitted[5]=="on":
                                fullscreenDesktop.append(curDesktop)
                                window.hide()
                            else:
                                fullscreenDesktop.remove(curDesktop)
                                window.show()

def die(): os.kill(os.getpid(), signal.SIGKILL)

def menuChanged(text):
    linedit.setText(text)
    #linedit.adjustSize()
    if text!="":
        d_elems = []
        for elem in range(len(sys.argv)-3):
            if sys.argv[elem].startswith(text): d_elems.append(sys.argv[elem])
        elementslabel.setText('    '.join(d_elems))
    else:
        elementslabel.setText("")

def menuReturnPressed():
    try:
        if len(elementslabel.text().split(" "))==1:
            subprocess.Popen(elementslabel.text().split(" ")[0],shell=True)
        subprocess.Popen(linedit.text(),shell=True)
        die()
    except FileNotFoundError:
        pass

if len(sys.argv)==1:
    print("Specify config path")
    sys.exit(0)
else:
    if sys.argv[1]=="-v" or sys.argv[1]=="--version":
        print("Chocolate "+version+" ଲ(ⓛ ω ⓛ)ଲ")
        sys.exit(0)
    else:
        config = json.load(open(sys.argv[1]))
        app = QtWidgets.QApplication([])
        window = QtWidgets.QMainWindow()
        if len(sys.argv)<3:
            RIGHTOUTPUTS = [""]*len(config["right_modules"])
            CENTEROUTPUTS = [""]*len(config["center_modules"])
            window.setWindowFlags(QtCore.Qt.Dialog | QtCore.Qt.FramelessWindowHint |
                              QtCore.Qt.WindowStaysOnTopHint | QtCore.Qt.Tool |
                              QtCore.Qt.X11BypassWindowManagerHint)
            window.setWindowTitle("chocolatebar")
        else:
            window.setWindowFlags(QtCore.Qt.Popup | QtCore.Qt.FramelessWindowHint |
                                  QtCore.Qt.WindowStaysOnTopHint | QtCore.Qt.X11BypassWindowManagerHint)
            window.setWindowTitle("chocolatemenu")
        window.setStyleSheet("background:"+config["colors"]["background"])
        window.move(config["position"]["width"],config["position"]["height"])
        window.setFixedSize(config["size"]["width"],config["size"]["height"])
        widget = QtWidgets.QWidget()
        layout = QtWidgets.QHBoxLayout(widget)
        layout.setContentsMargins(0,0,0,0)
        layout.setSpacing(0)
        fontstyle = 'color: '+config["colors"]['text']
        if config["font"]["bold"].lower()=="true": fontstyle = fontstyle+";font-weight: bold"
        window.setCentralWidget(widget)
        if len(sys.argv)<3:
            leftlabel = QtWidgets.QLabel()
            leftlabel.setAlignment(QtCore.Qt.AlignLeft)
            leftlabel.setStyleSheet(fontstyle)
            leftlabel.setSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
            leftlabel.setFont(QtGui.QFont(config["font"]["family"], config["font"]["size"]))

            rightlabel = QtWidgets.QLabel()
            rightlabel.setAlignment(QtCore.Qt.AlignRight)
            rightlabel.setStyleSheet(fontstyle)
            rightlabel.setSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
            rightlabel.setFont(QtGui.QFont(config["font"]["family"], config["font"]["size"]))

            centerlabel = QtWidgets.QLabel()
            centerlabel.setAlignment(QtCore.Qt.AlignCenter)
            centerlabel.setStyleSheet(fontstyle)
            centerlabel.setFont(QtGui.QFont(config["font"]["family"], config["font"]["size"]))

            layout.addWidget(leftlabel)
            layout.addWidget(centerlabel)
            layout.addWidget(rightlabel)

            for module in range(len(config["right_modules"])):
                threading.Thread(target=updateModule, args=["right", module]).start()
            for module in range(len(config["center_modules"])):
                threading.Thread(target=updateModule, args=["center", module]).start()
            threading.Thread(target=updateDesktops).start()
            window.show()
        else:
            linedit = QtWidgets.QLineEdit()
            linedit.textChanged[str].connect(menuChanged)
            linedit.returnPressed.connect(menuReturnPressed)
            QtWidgets.QShortcut(QtGui.QKeySequence("ESCAPE"), linedit, activated=die)
            linedit.setAlignment(QtCore.Qt.AlignLeft)
            linedit.setStyleSheet(fontstyle+"; border:0px")
            linedit.setSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
            linedit.setFont(QtGui.QFont(config["font"]["family"], config["font"]["size"]))
            linedit.setFocusPolicy(QtCore.Qt.StrongFocus)
            layout.addWidget(linedit)

            elementslabel = QtWidgets.QLabel()
            elementslabel.setAlignment(QtCore.Qt.AlignRight)
            elementslabel.setStyleSheet(fontstyle)
            elementslabel.setSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
            elementslabel.setFont(QtGui.QFont(config["font"]["family"], config["font"]["size"]))
            layout.addWidget(elementslabel)

            window.show()
            linedit.setFocus()
        sys.exit(app.exec_())
