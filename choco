#!/bin/python
import signal
signal.signal(signal.SIGINT, signal.SIG_DFL)
import os, sys, json, subprocess, threading, time, requests, datetime, argparse
from PyQt5 import QtCore, QtWidgets, QtGui

version = "0.1.4"

def term_run(cmd): return subprocess.run(cmd, shell=True, stdout=subprocess.PIPE, cwd=sys.path[0]).stdout.decode('utf-8').split("\n")

def weather(city_id, api_key, lang, type):
    try:
        response = requests.get(f"https://api.openweathermap.org/data/2.5/weather?id={city_id}&lang={lang}&appid={api_key}&units={type}")
    except:
        return False
    if response.status_code==200:
        data = response.json()
        return f"{data['main']['temp']}°C ({data['weather'][0]['description']})"
    else:
        return False

def rates(rt1, rt2):
    try:
        response = requests.get(f'https://freecurrencyrates.com/api/action.php?do=cvals&iso={rt1}&f={rt2}&v=1&s=cbr')
    except:
        return False
    if response.status_code==200:
        return str(round(response.json()[rt1.upper()],2))
    else:
        return False

def date(formt): return datetime.datetime.now().strftime(formt)

def updateModule(align, index):
    if align=="right":
        cmd = config["right_modules"][index][0]
        label = config["right_modules"][index][1]
        intrv = config["right_modules"][index][2]
        term = config["right_modules"][index][3]
    elif align=="center":
        cmd = config["center_modules"][index][0]
        label = config["center_modules"][index][1]
        intrv = config["center_modules"][index][2]
        term = config["center_modules"][index][3]
    while True:
        if term.lower()=="true":
            output = term_run(cmd)[0]
        else:
            output = eval(cmd)
            if output==False:
                time.sleep(intrv)
                continue
        if align=="right":
            RIGHTOUTPUTS[index] = label.format(output)
            rightlabel.setText(config["spacing"].join(RIGHTOUTPUTS))
        elif align=="center":
            CENTEROUTPUTS[index] = output
            centerlabel.setText(label.format(config["spacing"].join(CENTEROUTPUTS)))
        time.sleep(intrv)

def updateDesktops():
    if config["wm"]=="bspwm":
        curDesktop = term_run("bspc query -D -d focused")[0]
        curDesktopName = term_run("bspc query -D -d focused --names")[0]
        leftlabel.setText("    " + curDesktopName)
        fullscreenDesktop = []
        with subprocess.Popen(["bspc","subscribe","desktop_focus", "node_state", "node_remove"], stdout=subprocess.PIPE, bufsize=1, universal_newlines=True) as p:
            for line in p.stdout:
                splitted = line.replace("\n", "").split(" ")
                #print(splitted)
                if 'desktop_focus' in line:
                    curDesktop = splitted[2]
                    curDesktopName = term_run("bspc query -T -d")[0].split('{"name":"')[1].split('","')[0]
                    leftlabel.setText("    " + curDesktopName)
                    for desktop in fullscreenDesktop:
                        if curDesktop==desktop.split(";")[0]:
                            window.hide()
                            break
                        else:
                            if window.isHidden: window.show()
                elif 'node_state' in line and splitted[4]=="fullscreen":
                    if splitted[5]=="on":
                        fullscreenDesktop.append(splitted[2]+";"+splitted[3])
                        window.hide()
                    else:
                        fullscreenDesktop.remove(splitted[2]+";"+splitted[3])
                        window.show()
                elif 'node_remove' in line:
                    if splitted[2]+";"+splitted[3] in fullscreenDesktop:
                        fullscreenDesktop.remove(splitted[2]+";"+splitted[3])
                        window.show()

def die(): sys.exit(0)

def menuChanged(text):
    linedit.setText(text)
    #linedit.adjustSize()
    if text!="":
        d_elems = []
        for elem in args.text.split("\n"):
            if elem.startswith(text): d_elems.append(elem)
        elementslabel.setText('    '.join(d_elems))
    else:
        elementslabel.setText("")

def menuReturnPressed():
    if args.exec_prefix==None: args.exec_prefix = ""
    try:
        if len(elementslabel.text().split(" "))==1:
            subprocess.Popen(args.exec_prefix+elementslabel.text().split(" ")[0],shell=True)
        else:
            subprocess.Popen(args.exec_prefix+linedit.text(),shell=True)
        die()
    except FileNotFoundError:
        pass

parser = argparse.ArgumentParser(description='github.com/mrtnvgr/choco')
parser.add_argument('-c','--config', default='default', help='configuration file')
parser.add_argument('-m','--mode', help='mode')
parser.add_argument('-t','--text', help='text (for menu&notify)')
parser.add_argument('-ep', '--exec-prefix', help='exec prefix (for menu)')
parser.add_argument('-v','--version', action='store_true', help='version')
args = parser.parse_args()

if args.version==True:
    print("Chocolate "+version+" ଲ(ⓛ ω ⓛ)ଲ")
elif os.path.exists(args.config):
    print("Specify config file")
elif args.mode==None:
    print("Specify mode")
elif args.mode!="bar" and args.text==None:
    print("Specify text")
else:
    if args.config=="default": args.config = os.getenv("HOME")+"/.config/choco/chocorc"
    config = json.load(open(args.config))
    app = QtWidgets.QApplication([])
    window = QtWidgets.QMainWindow()
    if args.mode=="bar":
        RIGHTOUTPUTS = [""]*len(config["right_modules"])
        CENTEROUTPUTS = [""]*len(config["center_modules"])
        window.setWindowFlags(QtCore.Qt.Dialog | QtCore.Qt.FramelessWindowHint |
                          QtCore.Qt.WindowStaysOnTopHint | QtCore.Qt.Tool |
                          QtCore.Qt.X11BypassWindowManagerHint)
        window.setWindowTitle("chocolatebar")
        window.move(int(config["bar"]["position"].lower().split("x")[0]),int(config["bar"]["position"].lower().split("x")[1]))
        window.setFixedSize(int(config["bar"]["size"].lower().split("x")[0]),int(config["bar"]["size"].lower().split("x")[1]))
        window.setStyleSheet("background:"+config["bar"]["backgroundColor"]+";border: "+config["bar"]["border"])
        fontstyle = 'color: '+config["bar"]['textColor']
    else:
        window.setWindowFlags(QtCore.Qt.Popup | QtCore.Qt.FramelessWindowHint |
                              QtCore.Qt.WindowStaysOnTopHint | QtCore.Qt.X11BypassWindowManagerHint)
        if args.mode=="notify":
            window.move(int(config["notify"]["position"].lower().split("x")[0]),int(config["notify"]["position"].lower().split("x")[1]))
            window.setWindowTitle("chocolatenotify")
            window.setStyleSheet("background:"+config["notify"]["backgroundColor"]+";border: "+config["notify"]["border"])
            fontstyle = 'color: '+config["notify"]["textColor"]
        elif args.mode=="menu":
            window.move(int(config["menu"]["position"].lower().split("x")[0]),int(config["menu"]["position"].lower().split("x")[1]))
            window.setFixedSize(int(config["menu"]["size"].lower().split("x")[0]),int(config["menu"]["size"].lower().split("x")[1]))
            window.setWindowTitle("chocolatemenu")
            window.setStyleSheet("background:"+config["menu"]["backgroundColor"]+";border: "+config["menu"]["border"])
            fontstyle = 'color: '+config["menu"]["textColor"]
    widget = QtWidgets.QWidget()
    layout = QtWidgets.QHBoxLayout(widget)
    layout.setContentsMargins(0,0,0,0)
    layout.setSpacing(0)
    if config["font"]["bold"].lower()=="true": fontstyle = fontstyle+";font-weight: bold"
    window.setCentralWidget(widget)
    if args.mode=="bar":
        leftlabel = QtWidgets.QLabel()
        leftlabel.setAlignment(QtCore.Qt.AlignLeft)
        leftlabel.setStyleSheet(fontstyle+";border-right: 0px")
        leftlabel.setSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        leftlabel.setFont(QtGui.QFont(config["font"]["family"], config["font"]["size"]))

        rightlabel = QtWidgets.QLabel()
        rightlabel.setAlignment(QtCore.Qt.AlignRight)
        rightlabel.setStyleSheet(fontstyle+";border-left: 0px")
        rightlabel.setSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        rightlabel.setFont(QtGui.QFont(config["font"]["family"], config["font"]["size"]))

        centerlabel = QtWidgets.QLabel()
        centerlabel.setAlignment(QtCore.Qt.AlignCenter)
        centerlabel.setStyleSheet(fontstyle+";border-left: 0px;border-right: 0px")
        centerlabel.setFont(QtGui.QFont(config["font"]["family"], config["font"]["size"]))
        layout.addWidget(leftlabel)
        layout.addWidget(centerlabel)
        layout.addWidget(rightlabel)

        for module in range(len(config["right_modules"])):
            threading.Thread(target=updateModule, args=["right", module]).start()
        for module in range(len(config["center_modules"])):
            threading.Thread(target=updateModule, args=["center", module]).start()
        threading.Thread(target=updateDesktops).start()
        window.show()
    elif args.mode=="notify":
        # TODO: on_click handlers
        textlabel = QtWidgets.QLabel()
        QtWidgets.QShortcut(QtGui.QKeySequence("RETURN"), textlabel, activated=die)
        textlabel.setAlignment(QtCore.Qt.AlignLeft)
        textlabel.setStyleSheet(fontstyle)
        textlabel.setSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        textlabel.setFont(QtGui.QFont(config["font"]["family"], config["font"]["size"]))
        textlabel.setText(args.text)
        layout.addWidget(textlabel)
        window.show()
    elif args.mode=="menu":
        linedit = QtWidgets.QLineEdit()
        linedit.textChanged[str].connect(menuChanged)
        linedit.returnPressed.connect(menuReturnPressed)
        QtWidgets.QShortcut(QtGui.QKeySequence("ESCAPE"), linedit, activated=die)
        linedit.setAlignment(QtCore.Qt.AlignLeft)
        linedit.setStyleSheet(fontstyle+";border-right: 0px")
        linedit.setSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        linedit.setFont(QtGui.QFont(config["font"]["family"], config["font"]["size"]))
        linedit.setFocusPolicy(QtCore.Qt.StrongFocus)
        layout.addWidget(linedit)
        elementslabel = QtWidgets.QLabel()
        elementslabel.setAlignment(QtCore.Qt.AlignRight)
        elementslabel.setStyleSheet(fontstyle+";border-left: 0px")
        elementslabel.setSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        elementslabel.setFont(QtGui.QFont(config["font"]["family"], config["font"]["size"]))
        elementslabel.setText(args.text.replace("\n", "    "))
        layout.addWidget(elementslabel)
        window.show()
        linedit.setFocus()
    sys.exit(app.exec_())
